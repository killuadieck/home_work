"""
题目：
    给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
示例：
    不需要

解题思路:
    方法一：
        滑动窗口的方式，左边窗口位置初始为0，逐步向右边移动，如果遇到的字符不重复，则扩大窗口[left,i],当第i个为重复字符时，
        找到之前记录的 字符:位置 关系，将窗口的左侧移动到之前记录重复字符的位置 + 1的位置。 最终只需计算出 i - left + 1 则为字符长度。
        此时用max函数，比对每次计算出的 i - left + 1的值，取最大的值即可
"""


def lswrc(s):
    data = {}  # 用于记录 字符ASCII码值 : 字符下角标位置   关系的数据
    for k in range(256):
        data[k] = -1  # 初始化数据，key：0~255表示256个字符对应的ASCII码，value均为-1，表示初始化位置值。
    left = 0  # 字符的滑动窗口左侧起始位置初始值
    n = len(s)  # 字符长度
    res = 0  # 用manx函数计算出来的值保存的变量
    for i in range(n):  # 循环历遍字符
        """
        取当前字符记录的位置，与滑动窗口的左侧相比较，如果大于等于left，则说明data中已经存在该字符(最初新字符的位置值初始化为-1)， 即出现重复字符.
        则更新滑动窗口左侧的位置，left的值，移动到前一个重复字符的加1的位置。
        """
        if data[ord(s[i])] >= left:
            left = data[ord(s[i])] + 1
        data[ord(s[i])] = i  # 更新data中的数据，将字符对应新的位置值存入
        res = max(res, i - left + 1)  # 比对每次计算出的 i - left + 1的值，取最大值
    return res
